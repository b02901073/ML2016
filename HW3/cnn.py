#importing keras
from __future__ import print_function
#from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.optimizers import SGD
from keras.utils import np_utils

import csv
import sys
import pickle
import numpy as np

a = sys.argv[1]
b = sys.argv[2]
print('input data:',a)
print('output model:',b)
# input image dimensions
img_rows, img_cols = 32, 32
# the CIFAR10 images are RGB
img_channels = 3

class CNN:
    def __init__(self):
        #data parameter
        self.batch_size = 32
        self.nb_classes = 10
        self.nb_epoch = 250
        self.data_augmentation = True
        #read in data
        self.all_label = np.array(pickle.load( open( a+'all_label.p', "rb" )))
        self.X_train = self.all_label.reshape(5000,3,32,32).transpose(0,2,3,1)

        self.all_unlabel = np.array(pickle.load( open( a+'all_unlabel.p', "rb" )))
        self.X_unlabel = self.all_unlabel.reshape(45000,3,32,32).transpose(0,2,3,1)

        #self.test = pickle.load( open( a+'test.p', "rb" ))
        #self.test_data = np.array(self.test['data'])
        #self.X_test = self.test_data.reshape(10000,3,32,32).transpose(0,2,3,1)

        #init data array
        self.y_train = np.empty((5000,1), dtype = np.int)
        #transfer data array
        for i in range(0,10):
            for j in range(0,500):
                self.y_train[i*500+j] = i

        #adjust data 
        self.X_train = self.X_train.astype('float32')
        self.X_unlabel = self.X_unlabel.astype('float32')
        #self.X_test = self.X_test.astype('float32')
        self.X_train /= 255
        self.X_unlabel /= 255
        #self.X_test /= 255

        print('X_train shape:', self.X_train.shape)
        print('Y_train shape:', self.y_train.shape)
        print('X_unlabel shape:', self.X_unlabel.shape)

        # convert class vectors to binary class matrices
        self.Y_train = np_utils.to_categorical(self.y_train, self.nb_classes)
        
        #run functions
        self.constructModel()
        self.fitting()
        self.train_unlabel()
        self.fitting()

    def constructModel(self):
        model = Sequential()

        model.add(Convolution2D(32, 3, 3, border_mode='same',
                                input_shape=self.X_train.shape[1:]))
        model.add(Activation('relu'))
        model.add(Convolution2D(32, 3, 3))
        model.add(Activation('relu'))
        model.add(MaxPooling2D(pool_size=(2, 2)))
        model.add(Dropout(0.25))

        model.add(Convolution2D(64, 3, 3, border_mode='same'))
        model.add(Activation('relu'))
        model.add(Convolution2D(64, 3, 3))
        model.add(Activation('relu'))
        model.add(MaxPooling2D(pool_size=(2, 2)))
        model.add(Dropout(0.25))

        model.add(Flatten())
        model.add(Dense(512))
        model.add(Activation('relu'))
        model.add(Dropout(0.5))
        model.add(Dense(self.nb_classes))
        model.add(Activation('softmax'))
        
        # let's train the model using SGD + momentum (how original).
        #need to change parameter
        #sgd = SGD(lr=10, decay=1e-6, momentum=0.9, nesterov=True)
        model.compile(loss='categorical_crossentropy',
                      optimizer='Adam',
                      metrics=['accuracy'])
        self.model = model

    def fitting(self):
        print('Using real-time data augmentation.')

        # this will do preprocessing and realtime data augmentation
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
            width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
            height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False)  # randomly flip images

        # compute quantities required for featurewise normalization
        # (std, mean, and principal components if ZCA whitening is applied)
        datagen.fit(self.X_train)

        # fit the model on the batches generated by datagen.flow()
        self.model.fit_generator(datagen.flow(self.X_train, self.Y_train,
                            batch_size=self.batch_size),
                            samples_per_epoch=self.X_train.shape[0],
                            nb_epoch=self.nb_epoch)
        self.model.save(b)

    def predict(self,P):
        predict = self.model.predict_proba(P)
        #print('predict[44999]', predict[44999])
        Class = np.argmax(predict, axis=1)
        Conf = np.amax(predict, axis=1)
        return Class,Conf

    def add_label(self,classes,confs):
        #add label
        high_id = []
        low_id = []
        for i in range(len(classes)):
            if confs[i] > 0.9:
                high_id.append(i)
            else:
                low_id.append(i)
        if len(high_id) == 0:
            return
        add_image = self.X_unlabel[high_id]
        add_class = classes[high_id]
        add_class = add_class.reshape(add_class.shape[0],1)
        if len(low_id) == 0:
            self.X_unlabel = []
        else:
            self.X_unlabel = self.X_unlabel[low_id]
        self.X_train = np.concatenate((self.X_train, add_image))
        self.y_train = np.concatenate((self.y_train, add_class))
        self.Y_train = np_utils.to_categorical(self.y_train,self.nb_classes)

    def train_unlabel(self):
        print('training unlabel')
        count = 0
        while len(self.X_unlabel) != 0:
            if count == 10:
                break
            count += 1
            print('train unlabel :',count)
            self.nb_epoch = 20
            classes, confs = self.predict(self.X_unlabel)
            self.add_label(classes, confs)
            self.fitting()
        self.nb_epoch = 100

if __name__=='__main__':
    cnn = CNN()